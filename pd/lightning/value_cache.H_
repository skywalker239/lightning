// Copyright (C) 2012, Alexander Kharitonov <alexander.kharitonov@gmail.com>
// Copyright (C) 2012, YANDEX LLC.
// This code may be distributed under the terms of the GNU GPL v3.
// See ‘http://www.gnu.org/licenses/gpl.html’.
// vim: set tabstop=4 expandtab:
#pragma once

#include <vector>

#include <pd/base/thr.H>
#include <pd/lightning/acceptor_instance_store.H>

namespace pd {

//! An in-memory cache of committed Paxos instances.
//  Organized as a large ring buffer which is not
//  allowed to overflow past the last snapshot revision.
class value_cache_t : public acceptor_instance_store_t {
    value_cache_t(size_t cache_size);

    //! Returns the instance iid if it is in the cache.
    virtual ref_t<acceptor_instance_t> lookup(instance_id_t iid);

    //! Returns false if storing iid would overflow the ring buffer
    //  past the current snapshot.
    virtual bool store(instance_id_t iid,
                       ref_t<acceptor_instance_t> instance);

    //! Does nothing.
    virtual void updated(instance_id_t iid);

    void set_snapshot_version(instance_id_t iid);
private:
    value_cache_t(const value_cache_t&) = delete;
    value_cache_t& operator=(const value_cache_t&) = delete;

    const size_t cache_size_;
    std::vector<ref_t<acceptor_instance_t> > cache_;
    instance_id_t begin_, snapshot_version_;

    thr::spinlock_t lock_;
};

}  // namespace pd
